<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.github.shimmer-projects</groupId>
        <artifactId>shimmer</artifactId>
        <version>0.0.1-SNAPSHOTS</version>
    </parent>

    <artifactId>shimmer-runner</artifactId>
    <packaging>jar</packaging>

    <name>shimmer-runner</name>
    <url>https://github.com/shimmer-projects/shimmer</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.github.shimmer-projects</groupId>
                <artifactId>shimmer-dependencies</artifactId>
                <version>${project.parent.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.github.shimmer-projects</groupId>
            <artifactId>shimmer-preferences</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.shimmer-projects</groupId>
            <artifactId>shimmer-authority</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.shimmer-projects</groupId>
            <artifactId>shimmer-filestore</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.shimmer-projects</groupId>
            <artifactId>shimmer-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- scope元素主要用来控制依赖的使用范围，指定当前包的依赖范围和依赖的传递性，也就是哪些依赖在哪些classpath中可用。
               常见的可选值有：
               compile    : 默认值。compile表示对应依赖会参与当前项目的编译、测试、运行等，是一个比较强的依赖。打包时通常会包含该依赖，部署时会打包到lib目录下。
               provided   : provided适合在编译和测试的环境，和compile功能相似，但provide仅在编译和测试阶段生效，provide不会被打包，也不具有传递性。
               runtime    : runtime仅仅适用于运行和测试环节，在编译环境下不会被使用。比如编译时只需要JDBC API的jar，而只有运行时才需要JDBC驱动实现。
               test       : scope为test表示依赖项目仅参与测试环节，在编译、运行、打包时不会使用。最常见的使用就是单元测试类了
               system     : system范围依赖与provided类似，不过依赖项不会从maven仓库获取，而需要从本地文件系统提供。使用时，一定要配合systemPath属性。不推荐使用，尽量从Maven库中引用依赖。
               等。-->
            <scope>runtime</scope>
            <!-- 表示依赖是否传递 false表示具有传递性 true表示不具有传递性-->
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <!--                <configuration>-->
                <!--                    <archive>-->
                <!--                        &lt;!&ndash; 生成的jar中不要包含pom.xml和pom.properties这两个文件 &ndash;&gt;-->
                <!--                        <addMavenDescriptor>false</addMavenDescriptor>-->
                <!--                        <manifest>-->
                <!--                            <addClasspath>true</addClasspath>-->
                <!--                            <classpathPrefix>lib/</classpathPrefix>-->
                <!--                            &lt;!&ndash;这里需要修改为你的项目的主启动类&ndash;&gt;-->
                <!--                            <mainClass>io.github.shimmer.runner.AppStarter</mainClass>-->
                <!--                        </manifest>-->
                <!--                    </archive>-->
                <!--                </configuration>-->
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>2.1.0</version>
                <configuration>
                    <!-- flat与lib共同决定将项目用的的所有jar包复制到lib目录下 -->
                    <!-- lib目录中jar的存放规则，默认是${groupId}/${artifactId}的目录格式，flat表示直接把jar放到lib目录 -->
                    <repositoryLayout>flat</repositoryLayout>
                    <!--从哪里copy配置文件-->
                    <configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
                    <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
                    <!--是否copy配置文件-->
                    <copyConfigurationDirectory>true</copyConfigurationDirectory>
                    <!--配置文件存放在conf目录路径-->
                    <configurationDirectory>conf</configurationDirectory>
                    <!-- 打包的jar，以及maven依赖的jar放到这个目录里面 -->
                    <repositoryName>lib</repositoryName>
                    <!-- 可执行脚本的目录 -->
                    <binFolder>bin</binFolder>

                    <!-- 生成linux, windows两种平台的执行脚本 -->
                    <platforms>
                        <platform>windows</platform>
                        <platform>unix</platform>
                    </platforms>
                    <!-- 针对不同平台生成不同类型的启动脚本 -->
                    <binFileExtensions>
                        <unix>.sh</unix>
                        <windows>.bat</windows>
                    </binFileExtensions>

                    <!--编码，日志-->
                    <encoding>${maven.compiler.encoding}</encoding>
                    <logsDirectory>logs</logsDirectory>
                    <tempDirectory>tmp</tempDirectory>
                    <programs>
                        <program>
                            <mainClass>io.github.shimmer.runner.AppStarter</mainClass>
                            <jvmSettings>
                                <extraArguments>
                                    <extraArgument>-server</extraArgument>
                                    <extraArgument>-Xms128M</extraArgument>
                                    <extraArgument>-Xmx2G</extraArgument>
                                </extraArguments>
                            </jvmSettings>
                        </program>
                    </programs>
                </configuration>

                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 排除resources下面的yml(因为我们需要把它放在jar外部,不能让jar打包插件将其打入jar包classpath下去) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <!-- 打包后的包名是否包含assembly的id名 -->
                    <appendAssemblyId>false</appendAssemblyId>
                    <!-- 指定最后tar或者zip包的名字 -->
                    <finalName>shimmer-${project.parent.version}</finalName>
                    <!-- tar或者zip包的输出目录 -->
                    <outputDirectory>target/</outputDirectory>
                    <descriptors>
                        <!-- 引用的assembly配置文件，可以用多个，即可以同时打包多个格式的包 -->
                        <descriptor>assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <!--名字任意 -->
                        <id>make-assembly</id>
                        <!-- 绑定到package生命周期阶段上 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 只运行一次 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
